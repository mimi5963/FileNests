package filenest.system;

import java.util.ArrayList;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import filenest.Session;
import filenest.domain.Customer;
import filenest.domain.Document;
import filenest.domain.DocumentStatus;
import filenest.domain.label.DeptCode;
import filenest.domain.label.Label;
import filenest.util.IOUtil;
import filenest.util.KeyBoardInput;

public class DocumentSys {
	private Map<String,Document> document;
	private EnumMap<DeptCode, Map<String,Document>> bookMap;
	private static final String path ="C:\\Users\\KOSA\\Desktop\\docsIO\\docs";
	
	public DocumentSys() {
		bookMap = new EnumMap<DeptCode, Map<String,Document>>(DeptCode.class);
		for(DeptCode code: DeptCode.values()) {
			bookMap.put(code, new HashMap<>());
		}
		document = new HashMap<>();
	}
	
	public void addNewDocs() {
		System.out.println("********신규 문서 등록**********");
		System.out.println("문서명을 입력해주세요");
		String title = KeyBoardInput.scanner.nextLine();
		String version = title+"_v1";
		//문서 분류 지정
		System.out.println("문서 분류를 지정해주세요");
		System.out.println("1.총무부, 2.인사부, 3.경리부, 4.영업구, 5.자재부, 6.기획실, 7.전산실, 8.기타");
		int deptCode = Integer.parseInt(KeyBoardInput.scanner.nextLine());
		DeptCode code = DeptCode.getDeptCode(deptCode);
		System.out.println("문서 세부 분류를 지정해주세요");
		code.showOperationCodes();
		int opCode = Integer.parseInt(KeyBoardInput.scanner.nextLine());
		Label label = new Label(opCode, code); 
		
		//문서 상태 지정 
		System.out.println("문서 공개 여부를 입력해주세요 1.공개, 2.비공개");
		String publicinput = KeyBoardInput.scanner.nextLine();
		DocumentStatus documentStatus = null;
		if(publicinput.equals("2")) {
			System.out.print("문서 비밀번호를 입력해주세요:");
			String pass = KeyBoardInput.scanner.nextLine();
			documentStatus = DocumentStatus.documentStatusWithPassword(pass, version);
		}else {
			documentStatus = DocumentStatus.documentStatusWithOutPassword(version);
		}
		
		System.out.println("-------------문서내용을 작성해주세요-----------(종료하시려면, q를 눌러주세요)");
		StringBuffer sb = new StringBuffer();
		String input="";
		while(true) {
			input = KeyBoardInput.scanner.nextLine();
			if("q".equals(input))break;
			sb.append(input+"\n");
		}
		
		Document document = new Document(title, Session.getSession(), sb.toString(), documentStatus, label, path);
		bookMap.get(code).put(, document);
		buildPdf(document);
	}
	
	private void buildPdf(Document document) {
		IOUtil.writeDocumentPdf(document);
	}
	
	
	public static void main(String[] args) {
		Session.setNewSession("1111", new Customer());
		DocumentSys ds = new DocumentSys();
		ds.addNewDocs();
		IOUtil.writeDocumentMapToSerial(ds.bookMap);
		
		ds.bookMap = IOUtil.readDocumentMap();
		
		System.out.println(ds.bookMap);
		
	}
	
	public void showDocuments() {
		System.out.println("***********************문서 조회***********************");
		System.out.println("1.총무부, 2.인사부, 3.경리부, 4.영업구, 5.자재부, 6.기획실, 7.전산실, 8.기타");
		String deptInput = KeyBoardInput.scanner.nextLine();
		showDocsList(Integer.parseInt(deptInput));
	}

	private void showDocsList(int ordinal) {
		// TODO Auto-generated method stub
		for(Document docs : bookMap.get(DeptCode.getDeptCode(ordinal))) {
			docs.showInfo();
		}
	}
	
	public void findDocuments() {
		System.out.println("**********************문서 검색**********************");
		System.out.println("1. 저자, 2. 제목");
		
	}
	public void showDocumentDetail(String regNumber) {
		document.get(regNumber).showInfo();
	}
}
